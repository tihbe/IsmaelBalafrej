{
  "hash": "7ed3548f72e96c5558e367ffa3770eb3",
  "result": {
    "markdown": "---\ntitle: \"Unexpected coin flip experiment\"\ndescription: \"In this post, I explore a seemingly straightforward coin flip game between two players. Interestingly, the intuitive approach fails when validated with a Monte Carlo simulation.\"\ndate: \"03/20/2024\"\ncategories:\n  - simulation\n  - statistics\n---\n\nInteresting idea from this [X post by @littmath](https://twitter.com/littmath/status/1769044719034647001): \n\n> Flip a fair coin 100 timesâ€”it gives a sequence of heads (H) and tails (T). For each HH in the sequence of flips, Alice gets a point; for each HT, Bob does, so e.g. for the sequence THHHT Alice gets 2 points and Bob gets 1 point. Who is most likely to win?\n\n\nIf we pause to analyze, it might initially seem that Alice has the upper hand. Consider a perfect scenario: if the sequence were all heads (HHHHHHHHHH), Alice could rack up to 9 points out of 10 flips. On the flip side (pun intended), in a mixed sequence like HTHTHTHTHT, Bob would only manage to score 5 points out of 10. This reasoning suggests Alice might have a better chance of winning, right?\n\nBut here's where it gets intriguing. By conducting a Monte Carlo simulation with N=1M iterations, we uncover a surprising truth: Bob is actually more likely to win:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(0x1B)\nN = 1_000_000\nbob_wins = 0\nalice_wins = 0\n\nfor i in range(N):\n    flips = np.random.randint(0, 2, size=100)  # 0: head, 1: tail\n    flips_diff = np.diff(flips)  # 1 for TH, -1 for HT, 0 otherwise\n    points_alice = np.sum((flips_diff == 0) & (flips[:-1] == 0))  # HH\n    points_bob = np.sum(flips_diff == -1)  # HT\n    if points_bob > points_alice:\n        bob_wins += 1\n    elif points_bob < points_alice:\n        alice_wins += 1\n\nfig, ax = plt.subplots(figsize=(4, 3))\nax.bar(\n    [\"Bob wins\", \"Alice wins\"],\n    [bob_wins / N, alice_wins / N],\n    0.5,\n)\nax.set_ylabel(\"Probability\")\nax.set_ylim([0.45, 0.5])\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(axis='y')\npass\n```\n\n::: {.cell-output .cell-output-display}\n![Probability of winning the coin-pair flip game for Bob and Alice.](2023-03-20_files/figure-html/cell-2-output-1.png){width=374 height=268 fig-align='center'}\n:::\n:::\n\n\nThe nuance here is that Alice might have the potential to score more points in a single game, but when we look at the bigger picture, Bob wins more frequently. Let's enumerate all possible outcomes with just 4 coin flips to understand why:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom IPython.display import Markdown\nfrom itertools import product\n\nmd = f\"\"\"\n| Flips | Points Alice | Points Bob | Winner | \n|-------|--------------|------------|--------|\n\"\"\"\n\nfor l in product(\"TH\", repeat=4):\n    flips = \"\".join(l)\n    points_alice = points_bob = 0\n    for pair in zip(flips[:-1], flips[1:]):\n        if pair == (\"H\", \"H\"):\n            points_alice += 1\n        elif pair == (\"H\", \"T\"):\n            points_bob += 1\n    winner = \"Draw\"\n    if points_alice > points_bob:\n        winner = \"Alice\"\n    elif points_alice < points_bob:\n        winner = \"Bob\"\n    md += f\"| {flips} | {points_alice} | {points_bob} | {winner} |\\n\"\n\nMarkdown(md)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n\n| Flips | Points Alice | Points Bob | Winner | \n|-------|--------------|------------|--------|\n| TTTT | 0 | 0 | Draw |\n| TTTH | 0 | 0 | Draw |\n| TTHT | 0 | 1 | Bob |\n| TTHH | 1 | 0 | Alice |\n| THTT | 0 | 1 | Bob |\n| THTH | 0 | 1 | Bob |\n| THHT | 1 | 1 | Draw |\n| THHH | 2 | 0 | Alice |\n| HTTT | 0 | 1 | Bob |\n| HTTH | 0 | 1 | Bob |\n| HTHT | 0 | 2 | Bob |\n| HTHH | 1 | 1 | Draw |\n| HHTT | 1 | 1 | Draw |\n| HHTH | 1 | 1 | Draw |\n| HHHT | 2 | 1 | Alice |\n| HHHH | 3 | 0 | Alice |\n\n:::\n:::\n\n\nThis detailed breakdown showcases Bob's advantage, who wins more often than Alice in this simplified scenario. The total number of points in all games for both Alice and Bob is equal, 12. Yet, Bob wins more often by a small margin. This exploration not only demonstrates the surprising outcomes that can emerge from seemingly straightforward situations but also highlights the beauty of Monte Carlo simulations in revealing the unexpected.\n\n",
    "supporting": [
      "2023-03-20_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}