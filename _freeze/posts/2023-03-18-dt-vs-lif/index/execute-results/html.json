{
  "hash": "1ae72dc98aa60ae65667420bf5d912e9",
  "result": {
    "markdown": "---\ntitle: \"Selection of a timestep for SNN simulation\"\ndescription: \"What is the proper timestep to select when simulating a spiking neural network ? The answer is, of course, it depends. Although, I think the usual assumption is incorrect when using leaky-integrate-and-fire neurons. Here's why !\"\ndate: \"3/19/2023\"\ndraft: true\ncategories:\n  - SNN\n  - LIF\n---\n\n# Context\n\nI recently saw [this tweet](https://twitter.com/neuralreckoning/status/1580161403415330816) by Dan Goodman. In a quick experiment, they show that using a large timestep $\\delta t$ during the simulation of a LIF neuron is detrimental to its behavior. Indeed, the output spiking rate of a LIF neuron with a Poisson spike input decreases when the timestep increases. It already fails at 1 ms, which is somewhat a standard size for timesteps in the CS-oriented community. Even worse, at $\\delta t=10$ ms, the neuron doesn't even spike anymore. \n\nOf course, there is a direct relationship between the choice of $\\delta t$, and real-world simulation duration (or wall-clock time). Ideally, we would all be using a very large $\\delta t$ for our simulation. As [Guillaume Bellec](https://twitter.com/BellecGuill/status/1580440789217595394) pointed out, there might not even be any advantage in a machine learning setting to using a small $\\delta t$. Instead of simply accepting the fact that one must use a small timestep, I was wondering why is this simulation failing, even when using an exact solver instead of Euler's method. There should be a small distinction when the spike arrives at the beginning, or the end, of a clock cycles. We somewhat over or underestimate the membrane potential by $w\\exp(\\frac{-\\delta t}{\\tau})$ depending on when the spike arrived during the clock period.\n\n\n# Recreating the Simulation\n\nLet's define a simple experiment to replicate the behavior described in the tweet. We will create 100 LIF neurons, being simulated by 100 Poisson spike trains sampled at 5 Hz for 4 seconds. The LIF's time constant is $\\tau=10$ ms. The weights between the 100 inputs and 1000 output neurons are randomly sampled from a normal distribution $\\mathcal{N}(0.1, 0.25)$. We then take the mean output firing rate of every output neuron, and the standard deviation as error bars.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Configuration\nnp.random.seed(0x1B)\nduration = 4 # seconds\ntau = 0.010\nthresh = 1\nnb_inputs = 100\nnb_outputs = 1000\ninput_rate = 5 #Hz\nweights = np.random.randn(nb_outputs, nb_inputs)*0.5+0.1\ndts = np.logspace(-5, -1.5, 10) # in seconds\n\n# Simulation\nfig, ax = plt.subplots(figsize=(6, 4), tight_layout=True)\nspike_rates = np.zeros((len(dts), nb_outputs)) # output\nfor i, dt in enumerate(dts):\n    time = np.arange(0, duration, dt)\n    u = np.zeros(nb_outputs)\n    _exp = np.exp(-dt/tau)\n    input_spikes = np.random.poisson(lam=input_rate*dt, size=(len(time), nb_inputs))\n    weighted_input_spikes = input_spikes @ weights.T\n    spike_count = 0\n\n    for j, t in enumerate(time):\n        u = _exp * u + weighted_input_spikes[j]\n        spikes = u > thresh\n        spike_count += spikes\n        u[spikes] = 0 # reset\n    spike_rates[i] += spike_count / duration\nax.errorbar(dts*1000, spike_rates.mean(axis=1), yerr=spike_rates.std(axis=1), capsize=5,)\nax.set_xscale(\"log\")\nax.set_xlabel(\"$\\\\delta t$ [ms]\")\nax.set_ylabel(\"Output firing rate [sp/s]\");\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=566 height=374}\n:::\n:::\n\n\nWe arrive at a similar-looking plot, where the output spiking frequency is going down near $\\delta t=1$ ms.\n\n# Hypothesis\n\nA lot of commenters of the original thread suggested that $\\delta t$ must be chosen in accordance to $\\tau$. Of course, there is some influence of the chosen time constant $\\tau$, as the smaller the leakage during a timestep, the smaller the error of membrane potential that can happen. Although, I'm not convinced by that idea, because of the random nature of Poisson spikes. If a spike can arrive at any point in time during a timestep, eventually, the overestimation of membrane potential will roughly equal the underestimation. My hypothesis differs. I believe that the key difference is elsewhere. Because of the nature of the simulation, a neuron can only emit a single spike during one timestep. As a result, the LIF neuron is in a sort-of implicit refractory period for the duration of a timestep. Therefore, when the timestep if very large, i.e., $>1$ ms in this example, the neuron has a large refractory period as well, causing it to miss very important input spikes as it is not integrating new input during this cycle. \n\nIf the assumption is correct, i.e the timestep $\\delta t$ if forcing an implicit refractory period, then having a large refractory period but with a smaller $\\delta t$ should yield the same result as having a larger $\\delta t$. If we add a refractory period to the experiment above, we'll see that they do indeed provide a similar effect:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(6, 4), tight_layout=True)\n\nfor refractory_period in [0.001, 0.01, 0.1]:\n    spike_rates = np.zeros((len(dts), nb_outputs)) # output\n    for i, dt in enumerate(dts):\n        time = np.arange(0, duration, dt)\n        refrac_clk = int(refractory_period/dt)\n        u = np.zeros(nb_outputs)\n        refrac_cntr = np.zeros(nb_outputs, dtype=int)\n        _exp = np.exp(-dt/tau)\n        input_spikes = np.random.poisson(lam=input_rate*dt, size=(len(time), nb_inputs))\n        weighted_input_spikes = input_spikes @ weights.T\n        spike_count = 0\n\n        for j, t in enumerate(time):\n            non_refrac_neurons = refrac_cntr==0\n            u[non_refrac_neurons] = _exp * u[non_refrac_neurons] + weighted_input_spikes[j, non_refrac_neurons]\n            spikes = u > thresh\n            spike_count += spikes\n            u[spikes] = 0 # reset\n\n            # Setup refractory period\n            refrac_cntr = np.maximum(refrac_cntr-1, 0)\n            refrac_cntr[spikes] += refrac_clk\n\n        spike_rates[i] += spike_count / duration\n\n\n    ax.errorbar(dts*1000, spike_rates.mean(axis=1), yerr=spike_rates.std(axis=1), capsize=5, label=f\"Refrac.: {1000*refractory_period:0.1f}ms\")\n    ax.set_xscale(\"log\")\n    ax.set_xlabel(\"$\\\\delta t$ [ms]\")\n    ax.set_ylabel(\"Output firing rate [sp/s]\")\n    ax.legend(loc=\"lower left\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=566 height=374}\n:::\n:::\n\n\nAs we see, the output firing rates align when $\\delta t$ is equal to the refractory period. For example, at $\\delta t=10$ ms, the orange line only starts going down when the timestep becomes bigger than the explicit refractory period. Therefore, the model is actually correct. The only difference is that we have to consider that the effective refractory period is equal to the maximum between $\\delta t$ and the explicit refractory period. \n\n# Solution\n\nThe solution to this problem is quite simple. As I said before, the timestep of the simulation forces an implicit refractory period because the neuron can only spike once per timstep. If we remove this limitation, then we should remove this implicit refractory period and the output firing rate should be constant regardless of the timestep.\n\nTo do so, we count the number of times the membrane potential $u(t)$ is above the threshold to estimate how many times the neuron would spike in one timestep. $n_{spikes}(t)=\\lfloor \\frac{\\max \\{u(t), 0\\}}{u_{thresh}} \\rfloor$. We also edit the reset, such that we remove the threshold from the membrane potential $n_{spikes}$ times, refered to as a soft-reset. This reset mechanism is more precise when dealing with large timesteps, as the accumulated membrane potential is not wasted by an early spike during a timestep. We re-simulate the first experiment with this modification, and we obtain:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nnp.random.seed(0x1B)\nfig, ax = plt.subplots(figsize=(6, 4), tight_layout=True)\nspike_rates = np.zeros((len(dts), nb_outputs)) # output\nfor i, dt in enumerate(dts):\n    time = np.arange(0, duration, dt)\n    u = np.zeros(nb_outputs)\n    _exp = np.exp(-dt/tau)\n    input_spikes = np.random.poisson(lam=input_rate*dt, size=(len(time), nb_inputs))\n    weighted_input_spikes = input_spikes @ weights.T\n    spike_count = 0\n\n    for j, t in enumerate(time):\n        u = _exp * u + weighted_input_spikes[j]\n        #previous code: spikes = u > thresh\n        spikes = np.floor(np.maximum(u, 0) / thresh) # multiple spikes\n        spike_count += spikes\n        u -= spikes*thresh\n        #u[spikes > 0] = 0 \n\n    spike_rates[i] += spike_count / duration\nax.errorbar(dts*1000, spike_rates.mean(axis=1), yerr=spike_rates.std(axis=1), capsize=5,)\nax.set_xscale(\"log\")\nax.set_xlabel(\"$\\\\delta t$ [ms]\")\nax.set_ylabel(\"Output firing rate [sp/s]\");\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=566 height=374}\n:::\n:::\n\n\nAnd voil√†! We get the expected firing rate across all the timesteps. While this solution is very interesting for computational neuroscientists, it partly removes the energy-friendly ness of spiking neural networks since they are not binary anymore, and the reset involves some arithmetic.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}